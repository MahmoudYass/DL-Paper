path_train='/content/drive/MyDrive/train/'
path_test='/content/drive/MyDrive/test/'

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
from tqdm import tqdm
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout,MaxPooling2D
from keras.callbacks import EarlyStopping
from sklearn.preprocessing import StandardScaler
from keras.optimizers import Adam
import glob as gb
from keras.applications.vgg16 import VGG16

code = {'Class (4)': 0, 'Class (20)': 1}

def getcode(n):
    for x, y in code.items():
        if n == y:
            return x

x_train = []
y_train = []
img_size = 220

for i in os.listdir(path_train):
    files = gb.glob(pathname=str(os.path.join(path_train, i, '*.jpg')))

    for j in tqdm(files):
        image = cv2.imread(j)
        image_array = cv2.resize(image, (img_size, img_size))
        x_train.append(list(image_array))
        y_train.append(code[i])

# Convert to numpy arrays
x_train = np.array(x_train)
y_train = np.array(y_train)
print(x_train.shape)
print(y_train.shape)

x_test = []
y_test = []
img_size = 220
for i in os.listdir(path_test):
    files = gb.glob(pathname=str(os.path.join(path_test, i, '*.jpg')))

    for j in tqdm(files):
        image = cv2.imread(j)
        image_array = cv2.resize(image, (img_size, img_size))
        x_test.append(list(image_array))
        y_test.append(code[i])


# Convert to numpy arrays
x_test = np.array(x_test)
y_test = np.array(y_test)
print(x_test.shape)
print(y_test.shape)

model_vgg16 = VGG16(weights="imagenet", include_top=False, input_shape=(img_size, img_size, 3))
model = Sequential()

for layer in model_vgg16.layers:
  model.add(layer)

for layer in model.layers:
  layer.trainable = False # Not trainable weights

model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))
model.summary()

model.compile(optimizer = 'adam',loss = 'binary_crossentropy',metrics = ['accuracy'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Create an instance of ImageDataGenerator with augmentation options
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    width_shift_range=0.1,
    height_shift_range=0.1,
    rotation_range=10,
    fill_mode='nearest'
)

# Create the data generator for training data
train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/train/',
    target_size=(img_size, img_size),
    batch_size=32,
    class_mode='binary'
)

# Assuming x_test and y_test are generated using the data generator
# Now you can use this generator for training your model
history = model.fit(train_generator, epochs=5, validation_data=(x_test, y_test))

# Evaluate the model on the augmented test set
test_loss, test_accuracy = model.evaluate(train_generator)
print(f'Test Accuracy (after augmentation): {test_accuracy * 100:.2f}%')


early_stopping_monitor = EarlyStopping(patience = 2)
history = model.fit(x_train,y_train,epochs = 5,batch_size = 32, callbacks = [early_stopping_monitor])

model.evaluate(x_test,y_test.astype('float32'))

test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(f'Test Accuracy: {test_accuracy * 100:.2f}%')

from sklearn import metrics

# Replace these with your actual data
y_true = [1, 0, 1, 1, 0, 1]
y_pred = [0, 0, 1, 1, 0, 1]

accuracy = metrics.accuracy_score(y_true, y_pred)
precision = metrics.precision_score(y_true, y_pred, average='weighted')
recall = metrics.recall_score(y_true, y_pred, average='weighted')
f1_score = metrics.f1_score(y_true, y_pred, average='weighted')

print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1 Score: {f1_score}")


from google.colab import drive
drive.mount('/content/drive')